var searchIndex = new Map(JSON.parse('[\
["biotest",{"doc":"Generate random test data for bioinformatics","t":"EEEECCCHHCSJJJJJJJPGPPPPIPPPPPPNNNNNNNNNNNNNNNNNNNOOKNCCMMNCFFGPPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNFFGPPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPPFFGNNNNNNNNNNNNNNNNNCNNNNNCNNNNNNNNNNNNNNNFFGPPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNFFGPPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPPPPPGGPPPPPGPPKKPPPPGPGPGPPPPPPPPPPPPPPPPGGGGPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN","n":["Fasta","Fastq","Format","Vcf","constants","error","format","rand","seeded_rand","values","BIOTEST_VERSION","CHROMOSOMES","SEED","VCF_FORMAT_NUMBER","VCF_FORMAT_TYPE","VCF_INFO_NUMBER","VCF_INFO_TYPE","VCF_STRING_LENGTH","Err","Error","FastaBuilderError","FastqBuilderError","Ok","RandWeightedError","Result","StdIo","Unreachable","VcfBuilderError","VcfHeaderBuilderError","VcfRecordBuilderError","WeightArrayLargerValueArray","borrow","borrow_mut","fmt","fmt","from","from","from","from","from","from","from","from","into","source","to_string","try_from","try_into","type_id","vzip","file","line","Format","create","fasta","fastq","header","record","records","vcf","Fasta","FastaBuilder","FastaBuilderError","UninitializedField","ValidationError","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","build","builder","comment","comment_len","comment_prefix","comment_suffix","comment_weights","default","default","fmt","fmt","from","from","from","from","from","header","id","id_len","id_prefix","id_suffix","id_weights","into","into","into","record","sequence","sequence_len","sequence_weights","to_string","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","vzip","vzip","vzip","Fastq","FastqBuilder","FastqBuilderError","UninitializedField","ValidationError","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","build","builder","comment","comment_len","comment_prefix","comment_suffix","default","default","fmt","fmt","from","from","from","from","from","header","id","id_len","id_prefix","id_suffix","into","into","into","plus","plus_len","plus_prefix","plus_suffix","quality","record","sequence","sequence_len","to_string","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","vzip","vzip","vzip","UninitializedField","ValidationError","Vcf","VcfBuilder","VcfBuilderError","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","build","builder","default","default","fmt","fmt","from","from","from","from","from","header","header","header","into","into","into","record","record","record","to_string","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","vzip","vzip","vzip","Header","HeaderBuilder","HeaderBuilderError","UninitializedField","ValidationError","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","build","builder","contig_length","contig_species","contigs","default","default","filter","filter_description","filter_prefix","fmt","fmt","format_description","format_number","format_prefix","format_type","from","from","from","from","from","generate","info_description","info_number","info_prefix","info_type","into","into","into","sample","sample_prefix","sample_suffix","to_string","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","version","vzip","vzip","vzip","Record","RecordBuilder","RecordBuilderError","UninitializedField","ValidationError","alternative","alternative_len","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","build","builder","contigs","default","default","filter","filter_prefix","fmt","fmt","format_number","format_prefix","format_type","from","from","from","from","from","generate","id","id_len","id_prefix","id_suffix","info_number","info_prefix","info_type","into","into","into","position","quality","reference","reference_len","sample","to_string","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","vzip","vzip","vzip","A2z","All","All","All","All","Alphabet","Chromosomes","Default","Default","Dna","DnaLower","DnaUpper","Float","Full","Full","Generate","Get","Illumina","Illumina13","Illumina15","Illumina18","Integer","Lower","Nucleotides","Position","Quality","Quality","Rna","RnaLower","RnaUpper","Sanger","Solexa","Upper","UserDefine","UserDefine","UserDefine","UserDefine","UserDefine","UserDefine","UserDefine","Vcf","VcfDefault","VcfFormatNumber","VcfFormatType","VcfInfoNumber","VcfInfoType","Visible","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","default","default","default","default","default","default","default","default","default","default","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","generate","get","into","into","into","into","into","into","into","into","into","into","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","weighted"],"q":[[0,"biotest"],[10,"biotest::constants"],[18,"biotest::error"],[50,"biotest::error::Error"],[52,"biotest::format"],[60,"biotest::format::fasta"],[113,"biotest::format::fastq"],[168,"biotest::format::vcf"],[212,"biotest::format::vcf::header"],[269,"biotest::format::vcf::record"],[328,"biotest::values"],[516,"rand::rngs::std"],[517,"core::fmt"],[518,"core::fmt"],[519,"rand::distributions::weighted_index"],[520,"core::error"],[521,"core::option"],[522,"alloc::string"],[523,"core::result"],[524,"core::any"],[525,"std::path"],[526,"core::convert"],[527,"std::io"],[528,"alloc::vec"],[529,"derive_builder::error"],[530,"core::iter::traits::collect"]],"d":["","","","","Declarations of some constants value","Error struct of project biotest","Format data generation","Create a random generator with constants::SEED","Create a random generator with a user seed","Declarations of many possible values","biotest version","Some different possible chromosomes name","Fixed random seed","All vcf info number","All vcf info type","All vcf info number","All vcf info type","Length of vcf string","Contains the error value","Enum to manage error","biotest::format::fasta::FastaBuilderError","crate::format::fastq::FastqBuilderError","Contains the success value","rand::distributions::weighted::WeightedError","Alias of result","std::io::Error error","unreachable","crate::format::vcf::VcfBuilderError","crate::format::vcf::header::HeaderBuilderError","crate::format::vcf::record::RecordBuilderError","WeightedDistribution is larger than value","","","","","Returns the argument unchanged.","","","","","","","","Calls <code>U::from(self)</code>.","","","","","","","file name","line number","Trait of Format","Create a file at path with header and multiple records","Fasta generation","Fastq generation","Write header of format in output","Write a record in output","Write multiple record in output","VCF generation","Struct to generate random fastq record","Builder for <code>Fasta</code>.","Error type for FastaBuilder","Uninitialized field","Custom validation error","","","","","","","Builds a new <code>Fasta</code>.","Create a FastaBuilder","Alphapet use for comment generation","Comment length","Comment prefix","Comment suffix","Comment weights","","","","","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","","Alphabet use for id generation","Length of id","Id prefix","Id suffix","Id weights","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Alphabet use for sequence generation","Sequence length","Sequence weights","","","","","","","","","","","","","","Struct to generate random fastq record","Builder for <code>Fastq</code>.","Error type for FastqBuilder","Uninitialized field","Custom validation error","","","","","","","Builds a new <code>Fastq</code>.","Create a FastqBuilder","Alphapet use for comment generation","Comment length","Comment prefix","Comment suffix","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","","Alphabet use for id generation","Length of id","Id prefix","Id suffix","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Alphabet use for plus comment generation","Plus comment len","Plus prefix","Plus suffix","Alphabet use for quality generation","","Alphabet use for sequence generation","Sequence length","","","","","","","","","","","","","","Uninitialized field","Custom validation error","Struct to generate random fastq record","Builder for <code>Vcf</code>.","Error type for VcfBuilder","","","","","","","Builds a new <code>Vcf</code>.","Create a VcfBuilder","","","","","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","VCF header generation","Structure to define header","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","VCF header generation","Structure to define record","","","","","","","","","","","","","","","Struct to generate header","Builder for <code>Header</code>.","Error type for HeaderBuilder","Uninitialized field","Custom validation error","","","","","","","Builds a new <code>Header</code>.","Create a HeaderBuilder","contig length","contig species","Value use for chromosomes","","","filter range","filter description","filter prefix","","","format description","FormatNumber","format prefix","FormatType","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","Generate vcf header","info description","InfoNumber","info prefix","InfoType","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Number of sample","Sample prefix","Sample suffix","","","","","","","","","","","vcf version number","","","","Struct to generate record","Builder for <code>Record</code>.","Error type for RecordBuilder","Uninitialized field","Custom validation error","Alphabet use to alternative sequence","Alphabet use to alternative sequence","","","","","","","Builds a new <code>Record</code>.","Create a RecordBuilder","Value use for chromosomes","","","filter range","filter prefix","","","FormatNumber","format prefix","FormatType","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","Generate vcf record","Alphabet use to variant id","Length of id","Id prefix","Id suffix","InfoNumber","info prefix","InfoType","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Possible position","Quality range","Alphabet use to reference sequence","Alphabet use to reference sequence","Number of sample","","","","","","","","","","","","","","Ascii character between A-z","All possible Vcf info type","All possible Vcf info type","All possible Vcf format type","All possible Vcf format type","Differente generic ascii alphabet","Possible chromosomes names","between -100.0 and 100.0","Default chromosomes names","Dna any case","Dna lower case","Dna upper case","Range of float value","Full i32 range","Full f32 range","Trait use to generate random data from values Enum","Trait to choose a random value in range and convert it in …","Illumina quality range version 1.8","Illumina quality range version 1.3","Illumina quality range version 1.5","Illumina quality range version 1.8","Range of integer value","Lower case latin alphapet","Any nucleotides","Vcf possible position","Fastq quality range","Quality","Rna any case","Rna lower case","Rna upper case","Sanger fastq quality range","Solexa fastq quality range","Upper case latin alphabet","UserDefine","UserDefine","UserDefine","UserDefine","UserDefine","UserDefine","UserDefine","Vcf integer possible value","Vcf default value","Possible vcf format type","Possible vcf format type","Possible vcf info type","Possible vcf info type","Any visible ascii character","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Generate n bytes","Get a value","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Generate n bytes with a weigthed distributions"],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,21,0,3,3,21,3,0,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,53,53,0,18,0,0,18,18,18,0,0,0,0,12,12,25,12,26,25,12,26,25,26,25,25,25,25,25,25,26,12,12,25,12,12,12,26,26,25,25,25,25,25,25,12,26,26,25,25,25,12,25,12,26,25,12,26,25,12,26,25,12,26,0,0,0,6,6,32,6,33,32,6,33,32,33,32,32,32,32,32,33,6,6,32,6,6,6,33,33,32,32,32,32,32,6,33,32,32,32,32,32,33,32,32,6,32,6,33,32,6,33,32,6,33,32,6,33,9,9,0,0,0,35,9,36,35,9,36,35,36,35,36,9,9,35,9,9,9,36,0,35,36,35,9,36,0,35,36,9,35,9,36,35,9,36,35,9,36,35,9,36,0,0,0,11,11,39,11,37,39,11,37,39,37,39,39,39,39,37,39,39,39,11,11,39,39,39,39,39,11,11,11,37,37,39,39,39,39,39,11,37,39,39,39,11,39,11,37,39,11,37,39,11,37,39,39,11,37,0,0,0,7,7,47,47,47,7,38,47,7,38,47,38,47,47,38,47,47,7,7,47,47,47,47,7,7,7,38,38,47,47,47,47,47,47,47,47,7,38,47,47,47,47,47,7,47,7,38,47,7,38,47,7,38,47,7,38,27,46,45,44,43,0,0,49,41,31,31,31,0,42,49,0,0,34,34,34,34,0,27,0,42,0,42,31,31,31,34,34,27,42,49,41,46,45,44,43,42,27,0,0,0,0,27,27,34,31,41,46,45,44,43,27,34,31,42,49,41,46,45,44,43,27,34,31,42,49,41,46,45,44,43,27,34,31,42,49,41,46,45,44,43,27,34,31,42,49,41,46,45,44,43,27,34,31,42,49,41,46,45,44,43,27,34,31,42,49,41,46,45,44,43,27,34,31,42,49,41,46,45,44,43,50,51,27,34,31,42,49,41,46,45,44,43,27,34,31,42,49,41,46,45,44,43,27,34,31,42,49,41,46,45,44,43,27,34,31,42,49,41,46,45,44,43,27,34,31,42,49,41,46,45,44,43,27,34,31,42,49,41,46,45,44,43,50],"f":"```````{{}b}{db}``````````````````````{ce{}{}}0{{fh}j}0{cc{}}{lf}{nf}{A`f}{Abf}{Adf}{Aff}{Ahf}9{f{{Al{Aj}}}}{cAn{}}{c{{B`{e}}}{}{}}0{cBb{}}=```{{BdcbBf}{{Bj{Bh}}}{{Bn{Bl}}}}``{{BdC`b}{{Bj{Bh}}}}0{{BdC`bBf}{{Bj{Bh}}}}``````{ce{}{}}00000{Cb{{B`{CdAh}}}}{{}Cb}{{CbCf}Cb}{{CbBf}Cb}{{Cb{Cj{Ch}}}Cb}003{{}Cd}{{Ahh}j}0{cc{}}{AnAh}{ClAh}22{{CdC`b}{{Bj{Bh}}}}87666;;;0{{CbCn}Cb}87{cAn{}}{c{{B`{e}}}{}{}}00000{cBb{}}00???`````??????{D`{{B`{Dbl}}}}{{}D`}{{D`Cf}D`}{{D`Bf}D`}{{D`{Cj{Ch}}}D`}03{{}Db}{{lh}j}0>>{Cll}{Anl}{cc{}}{{DbC`b}{{Bj{Bh}}}}8766{ce{}{}}009877{{D`Dd}D`}2{{D`Cn}D`}:{cAn{}}{c{{B`{e}}}{}{}}00000{cBb{}}00555`````555555{Df{{B`{DhAb}}}}{{}Df}0{{}Dh}{{Abh}j}0;{AnAb}{ClAb}==`{{DfDj}Df}{{DhC`b}{{Bj{Bh}}}}===`{{DfDl}Df}1;::::::999>>>`````>>>>>>{Dn{{B`{DjAf}}}}{{}Dn}{{DnE`}Dn}{{Dn{Cj{Ch}}}Dn}{{DnEb}Dn}3{{}Dj}{{DnEd}Dn}33{{Afh}j}04{{DnEf}Dn}5{{DnEh}Dn}{cc{}}{ClAf}{AnAf}22{{DjC`}{{Bj{Bh}}}}:{{DnEj}Dn};{{DnEl}Dn}{ce{}{}}00{{DnBf}Dn}>>{cAn{}}{c{{B`{e}}}{}{}}00000{cBb{}}00{{Dn{Cj{Ch}}}Dn}555`````{{EnCn}En}{{EnBf}En}777777{En{{B`{Dln}}}}{{}En}{{EnEb}En}1{{}Dl}{{EnEd}En}{{En{Cj{Ch}}}En}{{nh}j}0{{EnEf}En}2{{EnEh}En}{cc{}}0{Ann}{Cln}2{{DlC`b}{{Bj{Bh}}}}{{EnCf}En}>88{{EnEj}En}9{{EnEl}En}{ce{}{}}00<<{{EnCn}En}{{EnBf}En}0{cAn{}}{c{{B`{e}}}{}{}}00000{cBb{}}00555```````````````````````````````````````````````{Cf{{F`{Ch}}}}{Dd{{F`{Ch}}}}{Cn{{F`{Ch}}}}{Eb{{F`{{F`{Ch}}}}}}{El{{F`{{F`{Ch}}}}}}{Ej{{F`{{F`{Ch}}}}}}{Eh{{F`{{F`{Ch}}}}}}{Ef{{F`{{F`{Ch}}}}}}===================={CfCf}{DdDd}{CnCn}{EdEd}{FbFb}{EbEb}{ElEl}{EjEj}{EhEh}{EfEf}{{ce}Bh{}{}}000000000{{}Cf}{{}Dd}{{}Cn}{{}Ed}{{}Fb}{{}Eb}{{}El}{{}Ej}{{}Eh}{{}Ef}{{Cfh}j}{{Ddh}j}{{Cnh}j}{{Edh}j}{{Fbh}j}{{Ebh}j}{{Elh}j}{{Ejh}j}{{Ehh}j}{{Efh}j}{cc{}}000000000{{FdbBf}{{Bj{{Cj{Ch}}}}}}{{Ffb}{{Cj{Ch}}}}{ce{}{}}0000000000000000000{c{{B`{e}}}{}{}}0000000000000000000{cBb{}}0000000002222222222{{FdbBfc}{{Bj{{Cj{Ch}}}}}Fh}","c":[],"p":[[5,"StdRng",516],[1,"u64"],[6,"Error",18],[5,"Formatter",517],[8,"Result",517],[6,"FastqBuilderError",113],[6,"RecordBuilderError",269],[5,"Error",518],[6,"VcfBuilderError",168],[6,"WeightedError",519],[6,"HeaderBuilderError",212],[6,"FastaBuilderError",60],[10,"Error",520],[6,"Option",521],[5,"String",522],[6,"Result",523],[5,"TypeId",524],[10,"Format",52],[1,"usize"],[1,"unit"],[8,"Result",18],[5,"Path",525],[10,"AsRef",526],[10,"Write",527],[5,"FastaBuilder",60],[5,"Fasta",60],[6,"Alphabet",328],[1,"u8"],[5,"Vec",528],[5,"UninitializedFieldError",529],[6,"Nucleotides",328],[5,"FastqBuilder",113],[5,"Fastq",113],[6,"Quality",328],[5,"VcfBuilder",168],[5,"Vcf",168],[5,"Header",212],[5,"Record",269],[5,"HeaderBuilder",212],[1,"u32"],[6,"Chromosomes",328],[6,"Integer",328],[6,"VcfFormatNumber",328],[6,"VcfFormatType",328],[6,"VcfInfoNumber",328],[6,"VcfInfoType",328],[5,"RecordBuilder",269],[1,"slice"],[6,"Float",328],[10,"Generate",328],[10,"Get",328],[10,"IntoIterator",530],[15,"Unreachable",50]],"b":[[33,"impl-Display-for-Error"],[34,"impl-Debug-for-Error"],[36,"impl-From%3CFastqBuilderError%3E-for-Error"],[37,"impl-From%3CRecordBuilderError%3E-for-Error"],[38,"impl-From%3CError%3E-for-Error"],[39,"impl-From%3CVcfBuilderError%3E-for-Error"],[40,"impl-From%3CWeightedError%3E-for-Error"],[41,"impl-From%3CHeaderBuilderError%3E-for-Error"],[42,"impl-From%3CFastaBuilderError%3E-for-Error"],[80,"impl-Display-for-FastaBuilderError"],[81,"impl-Debug-for-FastaBuilderError"],[83,"impl-From%3CString%3E-for-FastaBuilderError"],[84,"impl-From%3CUninitializedFieldError%3E-for-FastaBuilderError"],[132,"impl-Display-for-FastqBuilderError"],[133,"impl-Debug-for-FastqBuilderError"],[136,"impl-From%3CUninitializedFieldError%3E-for-FastqBuilderError"],[137,"impl-From%3CString%3E-for-FastqBuilderError"],[183,"impl-Display-for-VcfBuilderError"],[184,"impl-Debug-for-VcfBuilderError"],[186,"impl-From%3CString%3E-for-VcfBuilderError"],[187,"impl-From%3CUninitializedFieldError%3E-for-VcfBuilderError"],[233,"impl-Display-for-HeaderBuilderError"],[234,"impl-Debug-for-HeaderBuilderError"],[240,"impl-From%3CUninitializedFieldError%3E-for-HeaderBuilderError"],[241,"impl-From%3CString%3E-for-HeaderBuilderError"],[289,"impl-Debug-for-RecordBuilderError"],[290,"impl-Display-for-RecordBuilderError"],[296,"impl-From%3CString%3E-for-RecordBuilderError"],[297,"impl-From%3CUninitializedFieldError%3E-for-RecordBuilderError"]]}]\
]'));
if (typeof exports !== 'undefined') exports.searchIndex = searchIndex;
else if (window.initSearch) window.initSearch(searchIndex);
