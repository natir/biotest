var searchIndex = JSON.parse('{\
"biotest":{"doc":"Generate random test data for bioinformatics","t":"AAAFFRRRRRRRNENGNLLLLLLLLLLLLL","n":["constants","error","format","rand","text","ALPHABETS","NUCLEOTIDES","NUCLEOTIDES_LOWER","NUCLEOTIDES_UPPER","PHRED33","PHRED64","SEED","Err","Error","Ok","Result","StdIo","borrow","borrow_mut","fmt","fmt","from","from","into","source","to_string","try_from","try_into","type_id","vzip"],"q":[[0,"biotest"],[5,"biotest::constants"],[12,"biotest::error"],[30,"rand::rngs::std"],[31,"std::io"],[32,"core::fmt"],[33,"core::fmt"],[34,"core::error"],[35,"core::option"],[36,"alloc::string"],[37,"core::result"],[38,"core::any"]],"d":["Declarations of some constants value","Error struct of project biotest","Format data generation","Generate random generator","Write random text of length in output","Alphabets with [ \\\\ ] ^ _ `","Nucleotides with any case","Nucleotides lower","Nucleotides upper","All possible phred 33 value","All possible phred 64 value","Fixed random seed","Contains the error value","Enum to manage error","Contains the success value","Alias of result","std::io::Error error","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","",""],"i":[0,0,0,0,0,0,0,0,0,0,0,0,4,0,4,0,6,6,6,6,6,6,6,6,6,6,6,6,6,6],"f":[0,0,0,[[],1],[[-1,1,2],[[4,[3]]],5],0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[[6,7],8],[[6,7],8],[-1,-1,[]],[9,6],[-1,-2,[],[]],[6,[[11,[10]]]],[-1,12,[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,14,[]],[-1,-2,[],[]]],"c":[],"p":[[3,"StdRng",30],[15,"usize"],[15,"tuple"],[6,"Result",12],[8,"Write",31],[4,"Error",12],[3,"Formatter",32],[6,"Result",32],[3,"Error",33],[8,"Error",34],[4,"Option",35],[3,"String",36],[4,"Result",37],[3,"TypeId",38]],"b":[[19,"impl-Display-for-Error"],[20,"impl-Debug-for-Error"]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
