var searchIndex = new Map(JSON.parse('[\
["biotest",{"doc":"Generate random test data for bioinformatics","t":"CCCCHCCJSJJJJJJJJJPGPIPPNNNNNNNNNNNNNOOFFGPPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNFFGPPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPPPGGPPPPPGGKGPPPPPPPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNHCHH","n":["constants","error","fasta","fastq","rand","values","vcf","ALPHABETS","BIOTEST_VERSION","CHROMOSOMES","NUCLEOTIDES","PHRED33","PHRED64","SEED","VCF_FORMAT_NUMBER","VCF_FORMAT_TYPE","VCF_INFO_NUMBER","VCF_INFO_TYPE","Err","Error","Ok","Result","StdIo","Unreachable","borrow","borrow_mut","fmt","fmt","from","from","into","source","to_string","try_from","try_into","type_id","vzip","file","line","Fasta","FastaBuilder","FastaBuilderError","UninitializedField","ValidationError","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","build","builder","comment","comment_len","comment_prefix","comment_suffix","default","fmt","fmt","from","from","from","from","from","id","id_len","id_prefix","id_suffix","into","into","into","sequence","sequence_len","to_string","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","vzip","vzip","vzip","Fastq","FastqBuilder","FastqBuilderError","UninitializedField","ValidationError","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","build","builder","comment","comment_len","comment_prefix","comment_suffix","default","fmt","fmt","from","from","from","from","from","id","id_len","id_prefix","id_suffix","into","into","into","plus","plus_len","plus_prefix","plus_suffix","quality","sequence","sequence_len","to_string","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","vzip","vzip","vzip","A2z","All","All","Alphabet","Dna","Dna","Illumina","Lower","Lower","Lower","Nucleotides","Quality","Random","Rna","Rna","Sanger","Solexa","Upper","Upper","Upper","Visible","as_ref","as_ref","as_ref","as_ref","as_ref","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","into","into","into","into","into","n","one","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","vzip","create","header","records","write"],"q":[[0,"biotest"],[7,"biotest::constants"],[18,"biotest::error"],[37,"biotest::error::Error"],[39,"biotest::fasta"],[86,"biotest::fastq"],[138,"biotest::values"],[211,"biotest::vcf"],[214,"biotest::vcf::header"],[215,"rand::rngs::std"],[216,"core::fmt"],[217,"core::fmt"],[218,"core::error"],[219,"core::option"],[220,"alloc::string"],[221,"core::result"],[222,"core::any"],[223,"alloc::vec"],[224,"derive_builder::error"],[225,"std::path"],[226,"core::convert"],[227,"std::io"]],"d":["Declarations of some constants value","Error struct of project biotest","Fasta generation","Fastq generation","Create a random generator with constants::SEED","Declarations of many possible values","VCF generation","Alphabets with [ \\\\ ] ^ _ `","biotest version","Some different possible chromosomes name","Nucleotides with any case","All possible phred 33 value","All possible phred 64 value","Fixed random seed","All vcf info number","All vcf info type","All vcf info number","All vcf info type","Contains the error value","Enum to manage error","Contains the success value","Alias of result","std::io::Error error","unreachable","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","file name","line number","Struct to generate random fastq record","Builder for <code>Fasta</code>.","Error type for FastaBuilder","Uninitialized field","Custom validation error","","","","","","","Builds a new <code>Fasta</code>.","Create a FastaBuilder","Alphapet use for comment generation","Comment length","Comment prefix","Comment suffix","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","Alphabet use for id generation","Length of id","Id prefix","Id suffix","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Alphabet use for sequence generation","Sequence length","","","","","","","","","","","","","","Struct to generate random fastq record","Builder for <code>Fastq</code>.","Error type for FastqBuilder","Uninitialized field","Custom validation error","","","","","","","Builds a new <code>Fastq</code>.","Create a FastqBuilder","Alphapet use for comment generation","Comment length","Comment prefix","Comment suffix","","","","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","Alphabet use for id generation","Length of id","Id prefix","Id suffix","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Alphabet use for plus comment generation","Plus comment len","Plus prefix","Plus suffix","Alphabet use for quality generation","Alphabet use for sequence generation","Sequence length","","","","","","","","","","","","","","Ascii character between A-z","All","All","Differente generic ascii alphabet","Dna nucleotides","Dna","Illumina quality range 1.3 -&gt; 13, 1.5 -&gt; 15 and 1.8 -&gt; 18 â€¦","Lower case latin alphapet","Lower case only","Lower case only","Any nucleotides","Fastq quality range, default: Illumina(1.8)","Trait use to generate random data from values Enum","Rna nucleotides","Rna","Sanger fastq quality range","Solexa fastq quality range","Upper case latin alphabet","Upper case only","Upper case only","Any visible ascii character","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Generate n bytes","Generate one bytes","","","","","","","","","","","","","","","","","","","","","Create a vcf file","VCF header generation","Write multiple record","Generate vcf header"],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,28,0,28,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,34,34,0,0,0,13,13,11,13,12,11,13,12,11,12,11,11,11,11,11,13,13,11,13,13,13,12,11,11,11,11,11,13,12,11,11,13,11,13,12,11,13,12,11,13,12,11,13,12,0,0,0,22,22,20,22,21,20,22,21,20,21,20,20,20,20,20,22,22,20,22,22,22,21,20,20,20,20,20,22,21,20,20,20,20,20,20,20,22,20,22,21,20,22,21,20,22,21,20,22,21,14,25,26,0,0,19,23,14,25,26,0,0,0,0,19,23,23,14,25,26,14,14,23,25,26,19,14,23,25,26,19,14,23,25,26,19,14,23,25,26,19,14,23,25,26,19,14,23,25,26,19,27,27,14,23,25,26,19,14,23,25,26,19,14,23,25,26,19,14,23,25,26,19,0,0,0,0],"f":"````{{}b}```````````````````{ce{}{}}0{{df}h}0{jd}{cc{}}3{d{{n{l}}}}{cA`{}}{c{{Ab{e}}}{}{}}0{cAd{}}7```````777777{Af{{Ab{AhAj}}}}{{}Af}{{AfAl}Af}{{AfAn}Af}{{Af{Bb{B`}}}Af}03{{Ajf}h}0::{A`Aj}{BdAj}<5433???{{AfBf}Af}5;::::::999{ce{}{}}00`````000000{Bh{{Ab{BjBl}}}}{{}Bh}{{BhAl}Bh}{{BhAn}Bh}{{Bh{Bb{B`}}}Bh}03{{Blf}h}0{cc{}}{BdBl}1{A`Bl}265449996544{{BhBn}Bh}{{BhBf}Bh}7{cA`{}}{c{{Ab{e}}}{}{}}00000{cAd{}}00>>>`````````````````````{Al{{C`{B`}}}}{Bn{{C`{B`}}}}{Cb{{C`{B`}}}}{Cd{{C`{B`}}}}{Bf{{C`{B`}}}}{ce{}{}}000000000{{Alf}h}{{Bnf}h}{{Cbf}h}{{Cdf}h}{{Bff}h}{cc{}}000066666{{CfbAn}{{Ch{{Bb{B`}}}}}}{{Cfb}{{Ch{B`}}}}??????????>>>>>88888{{cbAn{n{B`}}Cj{n{B`}}}{{Ch{Cl}}}{{D`{Cn}}}}`{{cbAn{n{B`}}Cj{n{B`}}}{{Ch{Cl}}}Db}{{c{n{B`}}Cj{n{B`}}}{{Ch{Cl}}}Db}","c":[],"p":[[5,"StdRng",215],[6,"Error",18],[5,"Formatter",216],[8,"Result",216],[5,"Error",217],[10,"Error",218],[6,"Option",219],[5,"String",220],[6,"Result",221],[5,"TypeId",222],[5,"FastaBuilder",39],[5,"Fasta",39],[6,"FastaBuilderError",39],[6,"Alphabet",138],[1,"usize"],[1,"u8"],[5,"Vec",223],[5,"UninitializedFieldError",224],[6,"Nucleotides",138],[5,"FastqBuilder",86],[5,"Fastq",86],[6,"FastqBuilderError",86],[6,"Quality",138],[1,"slice"],[6,"Dna",138],[6,"Rna",138],[10,"Random",138],[8,"Result",18],[1,"bool"],[1,"unit"],[5,"Path",225],[10,"AsRef",226],[10,"Write",227],[15,"Unreachable",37]],"b":[[26,"impl-Display-for-Error"],[27,"impl-Debug-for-Error"],[57,"impl-Debug-for-FastaBuilderError"],[58,"impl-Display-for-FastaBuilderError"],[61,"impl-From%3CString%3E-for-FastaBuilderError"],[62,"impl-From%3CUninitializedFieldError%3E-for-FastaBuilderError"],[104,"impl-Debug-for-FastqBuilderError"],[105,"impl-Display-for-FastqBuilderError"],[107,"impl-From%3CUninitializedFieldError%3E-for-FastqBuilderError"],[109,"impl-From%3CString%3E-for-FastqBuilderError"]]}]\
]'));
if (typeof exports !== 'undefined') exports.searchIndex = searchIndex;
else if (window.initSearch) window.initSearch(searchIndex);
